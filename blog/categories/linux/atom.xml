<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Linux | comflag]]></title>
  <link href="http://comflag.github.com/blog/categories/linux/atom.xml" rel="self"/>
  <link href="http://comflag.github.com/"/>
  <updated>2012-06-05T07:51:21+08:00</updated>
  <id>http://comflag.github.com/</id>
  <author>
    <name><![CDATA[liang]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[我心中的桌面Linux系统]]></title>
    <link href="http://comflag.github.com/blog/2012/05/27/wo-xin-zhong-de-zhuo-mian-linuxxi-tong/"/>
    <updated>2012-05-27T13:49:00+08:00</updated>
    <id>http://comflag.github.com/blog/2012/05/27/wo-xin-zhong-de-zhuo-mian-linuxxi-tong</id>
    <content type="html"><![CDATA[<p>现在的Linux发行版通常以华丽的图形界面占尽风头，但是，作为桌面操作系统(不是服务器操作系统)，我非常希望Linux能考虑从下面几方面做一些努力:</p>

<!--more-->


<blockquote><p>1，允许多个软件安装进程同时运行。<br/>
2，提供像Mac OS X 一样的软件安装方式:既可以用安装包安装，也可以直接把软件拖到"应用程序文件夹"下就可以使用，软件卸载也是。<br/>
3，提供一个统一，高效的软件开发集成环境，类似与Windows下的VS和Mac OS下的Xcode。<br/>
4，提供更好的库依赖解决办法。<br/></p></blockquote>

<p>现在的Linux发行版一次都只能允许一个安装进程运行，我很想知道这会不会和Linux内核是单内核而非微内核的原因有关，如果真的有关系，这真的太无奈了。毕竟，Windows，Mac OS X 这些系统的内核都是基于微内核，他们都可以支持多个安装进程同时运行，因此linux在这方面显得非常奇怪而且低效。</p>

<p>有人说Mac OS X 是绿色软件鼻祖。的确，Mac OS X 的大多应用程序都经过精心打包，一个单程序包双击就可以运行，把这个程序包拖到废纸篓里就相当于把程序卸载了。不得不说这真的太方便了，老少皆宜，大大降低了系统的使用难度。希望Linux是不是也考虑一下往这方面发展一下。</p>

<p>关于开发环境，很多人说真正的大牛使用vi，或者emacs等文本编辑器就可以搞定绝大多数的开发工作，IDE仿佛显得很没有必要，很多人甚至崇拜用vi编辑器的人。真的是这样吗，我也使用vi编辑器写代码，平时简单的笔记都用vi编辑器，我之前写过一个php网站，无论是前端的页面设计，css布局还是后台管理模块和数据库操作的编写都是用的纯文本编辑器，网站规模不大，只有7000+行代码，这个过程也让我深深喜欢上用文本编辑器写代码的感觉。但是，发现没有，这些大多都是一些脚本语言(比如php,js)性质的，编译，调试过程通常都非常简单，即使是搞c开发也很少用框架的吧。随着软件开发变得越来越复杂，很多软件开发过程靠vi真的是很不靠谱的事情。比如用搞Java开发，随便开发个基于SSH框架(struts+spring+hibernate)的系统，如果没有类似Eclipse这样的IDE我真不敢想象其开发过程会多么复杂，同样，用文本编辑器写基于MFC框架的应用程序就更不敢想了。</p>

<p>很多次在Linux下安装软件时出错原因都是缺乏必要的依赖库，然后就是查看安装日志，到网上找相关的依赖库，有的还很不好找，有的甚至要翻墙才能搞到。这还是好的，有时软件对缺乏的库只提供模糊的提示，找都没法找。在这块我对linux很不了解，所以没办法说出linux这样子设计的具体好处。</p>

<p>库依赖，在Windows和Mac OS下几乎很少被提到，尤其是在Windows下，有时会提示系统的.net framework 版本过低，但也仅此而已，而且通常会直接给出下载链接，绝不会出现缺乏大量库文件的情况。这时，我想到了JAVA，一个JRE通常不超过35M，但是已经可以运行绝大多数的程序了，如果有些程序需要额外的运行环境支持，可以在开发时包含对应的jar包，而且，软件发布时，这些额外jar包是随软件一起发布的，因此通常不会出现缺少jar包的错误。可以说，Java已经提供了一个完整的运行时环境，Java应用程序在JVM里几乎可以脱离具体操作系统运行，这也是Java标榜自己一次编译到处运行的原因。我想，Android使用Java作为开发平台，一个很大的原因是考虑到Java完整的开发和运行环境，放眼望去，除了Windows下的C#，VC++以及Mac OS下的Objective-C，也只有Java能提供这么完整的开发运行环境了(而且Java还是现成的)。</p>

<p>Linux桌面发行版要是能提供一个完整的库依赖环境和程序运行环境，为桌面程序开发者提供更统一的开发环境，哪怕是抛弃一部分技术，抛弃一部分平台，也绝对是值得的。</p>

<p>再说说Mac OS X 吧。用了一阵子Mac OS X 系统后，我深深的喜欢上了这个系统，有时我甚至觉得Mac OS X 是最适合开发者使用的操作系统了。它有几乎最正宗的UNIX内核(微内核)，Linux可以做的事情，Mac OS X 也都可以做，而且，它还有自己完整而统一的Objective-C开发环境和Cocoa框架，美轮美奂、简单易用又极其稳定的图形用户界面(在Mac OS下几乎不用考虑修改界面主题，而linux下的图形界面经常发生变化和崩溃)以及越来越丰富的应用程序，当然它也内置了Apache，php，perl等程序，很容易进行这些脚本程序的开发。Mac OS X 是苹果硬件的灵魂，无数人为Mac OS X着迷真的一点都不为过。</p>

<p>我是一个Linux菜鸟，用Ubuntu只有几年，但是最近Unity界面真的惹恼我了，不方便，老崩溃，甚至还没有原版的Gnome桌面好用，网上提供那么多漂亮主题又顶什么用呢。当年第一次用ubuntu 9.10时是眼前一亮，真心喜欢啊；装上12.04后是眼前一黑，真心无语了。对Ubuntu的巨大失望，也是我前阵子下定决心编译了自己的Egg Boiler Linux 1.0的原因。</p>

<p>上面提出的几个问题可能很幼稚，还请大牛不要嘲笑，当然，更希望得到高手的指点~~</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[编译自己的Linux系统 -- Egg Boiler 1.0 诞生记]]></title>
    <link href="http://comflag.github.com/blog/2012/05/18/bian-yi-zi-ji-de-lfsxi-tong-xiao-ji/"/>
    <updated>2012-05-18T22:43:00+08:00</updated>
    <id>http://comflag.github.com/blog/2012/05/18/bian-yi-zi-ji-de-lfsxi-tong-xiao-ji</id>
    <content type="html"><![CDATA[<p>LFS，全称是Linux from Scratch，是一个教科书项目的名称，由 Gerard Beekmans 所发展并维护。这个项目旨在教人们完全从零开始编译自己的linux系统，所有的软件都是通过源码包安装，每个人都可以按照自己的需要定制自己的linux，这样可以做出来最小，最快也最满足自己需要的linux，我的这个linux就是按照LFS的思想来编译构建的。</p>

<p><a href="http://www.linuxfromscratch.org/lfs/">LFS官网</a></p>

<!--more-->


<p>在高中时我就想过将来有机会一定要做一个自己的操作系统出来，后来发现这并不是一件容易的事情，当然，也不是完全不可能，三年前接触了linux后，我就在构思如何能编译一个linux出来。后来，在研究破解无线网的过程中我接触到Beini Linux(奶瓶操作系统)，只有不到60M(ps:据说这个系统的作者是为了庆祝自己女儿的出生写下的这个操作系统),这让我觉得linux是完全可以自己定制并做的很小很小。</p>

<p>言归正传，我第一次接触LFS是在一年前，当时对linux的底层原理和库依赖关系等还是非常不清楚，对整个LFS的过程云里雾里的，所以就搁浅了。</p>

<p>最近又拿起来LFS，细细读了读，发现很多东西已经理解很透了，于是就在着手在自己的笔记本上构建LFS系统，说实话这个过程很费精力，我前后总共用了四天时间，几乎每天醒着的时间都在搞这个系统，当然，最后做出来后，很是自豪，这个系统我称之为"<font color="green">Egg Boiler 1.0</font>"，吼吼~~。</p>

<p>基本的LFS系统构建好以后，开机只要3s左右就到登陆界面了，真是快的一塌糊涂，爽啊。之后，我又在这个系统上安装了DHCP和pppoe，使得他可以自动获取IP地址，由于没有GUI界面，我安装了lynx浏览器，这样就可以通过文本方式访问互联网。</p>

<p>由于是第一次编译linux系统，下面说说自己遇到的困难:</p>

<p>首先是宿主系统的选择，最初用的是Fadero 16，因为他是基于Rad hat的，应该会很稳定，结果它搭载的Gnome3.4界面在root用户登陆的情况下总是崩溃，而且崩溃之后就进不了系统，在这种情况下重装了好几次，最后还是决定放弃Fadero。之后试用了Arch Linux也不是很顺利，最后还是决定用ubuntu 10.10，ubuntu果然不负众望，基本没出什么问题直到新系统的诞生…</p>

<p>其次是宿主系统环境的设置，LFS对GCC，Glib的环境的要求非常苛刻，刚开始不清楚，有些就没有按照官方给的配置设置环境，结果编译到一半，尤其是GCC的编译，总是出错，几近崩溃了都，最后还是老老实实按照官方给的要求重新配置了ubuntu的软件环境，总算是一步一步进行下去了…</p>

<p>再者是LFS版本的选择。早一点的LFS版本有中文翻译，我最早就是用的LFS 6.3，因为文档又中文，但是在编译GCC时总是出错，看了论坛上前人的经验才最后决定用LFS 6.8，虽然文档全是英文，但是基本上都能看懂能理解，结果LFS 6.8在我的ubuntu上果然一路顺利。可见，LFS的版本还是很重要的，一定要选对LFS版本，并严格按照文档来才能成功。</p>

<p>我还没有想好我做的这个系统究竟用来做什么，不过有了这个基础，将来根据需要把它改成服务器系统或嵌入式系统就很轻松了。</p>
]]></content>
  </entry>
  
</feed>
